Código inicial para o Text-to-Speech:

import pyttsx3

def text_to_speech(text):
    # Inicializando o mecanismo de TTS
    engine = pyttsx3.init()

    # Configurações de voz
    voices = engine.getProperty('voices')
    engine.setProperty('voice', voices[0].id)  # Escolha a voz padrão (masculina/feminina)
    engine.setProperty('rate', 150)  # Velocidade da fala (ajuste se necessário)
    engine.setProperty('volume', 1.0)  # Volume máximo

    # Executando o texto
    engine.say(text)
    engine.runAndWait()

# Testando o módulo
if __name__ == "__main__":
    texto = input("Digite o texto que deseja ouvir: ")
    text_to_speech(texto)

import speech_recognition as sr

def speech_to_text():
    # Inicializando o reconhecedor
    recognizer = sr.Recognizer()

    # Usando o microfone como fonte de áudio
    with sr.Microphone() as source:
        print("Diga algo...")
        try:
            # Ajusta o nível de ruído ambiente
            recognizer.adjust_for_ambient_noise(source, duration=1)

            # Captura a fala
            audio = recognizer.listen(source, timeout=5)

            # Converte a fala em texto usando o Google Web Speech API
            text = recognizer.recognize_google(audio, language="pt-BR")
            print(f"Você disse: {text}")
            return text
        except sr.WaitTimeoutError:
            print("Nenhum áudio detectado dentro do tempo limite.")
        except sr.UnknownValueError:
            print("Não foi possível reconhecer a fala.")
        except sr.RequestError as e:
            print(f"Erro no serviço de reconhecimento de fala: {e}")
        return None

# Testando o módulo
if __name__ == "__main__":
    resultado = speech_to_text()
    if resultado:
        print("Texto reconhecido com sucesso!")


#1. Integração de TTS e STT
import pyttsx3
import speech_recognition as sr
import webbrowser

def text_to_speech(text):
    engine = pyttsx3.init()
    engine.setProperty('rate', 150)
    engine.setProperty('volume', 1.0)
    engine.say(text)
    engine.runAndWait()

def speech_to_text():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Estou ouvindo...")
        try:
            recognizer.adjust_for_ambient_noise(source, duration=1)
            audio = recognizer.listen(source, timeout=5)
            text = recognizer.recognize_google(audio, language="pt-BR")
            print(f"Você disse: {text}")
            return text.lower()
        except sr.WaitTimeoutError:
            text_to_speech("Tempo limite esgotado. Por favor, tente novamente.")
        except sr.UnknownValueError:
            text_to_speech("Desculpe, não entendi o que você disse.")
        except sr.RequestError as e:
            text_to_speech(f"Erro no serviço de reconhecimento de fala: {e}")
        return None

# Teste da interação
if __name__ == "__main__":
    text_to_speech("Olá! Estou pronto para ouvir seu comando.")
    comando = speech_to_text()
    if comando:
        text_to_speech(f"Você disse: {comando}")
#2. Adicionando funcionalidades automatizadas
import wikipedia

def executar_comando(comando):
    if "youtube" in comando:
        text_to_speech("Abrindo o YouTube...")
        webbrowser.open("https://www.youtube.com")
    elif "wikipedia" in comando:
        text_to_speech("O que você quer pesquisar no Wikipedia?")
        pesquisa = speech_to_text()
        if pesquisa:
            try:
                resumo = wikipedia.summary(pesquisa, sentences=2, lang="pt")
                text_to_speech(f"Encontrei isso no Wikipedia: {resumo}")
            except wikipedia.exceptions.DisambiguationError:
                text_to_speech("A pesquisa retornou muitos resultados. Seja mais específico.")
            except wikipedia.exceptions.PageError:
                text_to_speech("Não encontrei informações sobre isso no Wikipedia.")
    elif "farmácia" in comando:
        text_to_speech("Abrindo o mapa para encontrar a farmácia mais próxima...")
        webbrowser.open("https://www.google.com/maps/search/farmácia")
    else:
        text_to_speech("Desculpe, não reconheci o comando.")

# Integração final
if __name__ == "__main__":
    text_to_speech("Olá! Qual comando você deseja executar?")
    comando = speech_to_text()
    if comando:
        executar_comando(comando)
